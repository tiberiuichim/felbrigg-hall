-- go.property("factory", hash("#rain_factory"))

local orthocam = require "orthographic.camera"

function init(self)
	self.camera = hash("/camera")
	
	local factory_url = "#rain_factory"
	self.fx = msg.url(factory.create(factory_url, pos))
	particlefx.play(self.fx)
end

function update(self, dt)
	local coords = orthocam.screen_to_world_bounds(self.camera)
	-- print(coords)
	
	-- local viewport = orthocam.get_viewport(self.camera)
	-- local screen = 
	-- print(viewport)
	-- local world_coords = orthocam.screen_to_world(self.camera, viewport)
	-- print(world_coords)
	-- 
	-- -- local pos = go.get_position("/player")
	-- -- go.set_position(pos, self.fx)
	-- -- print("position", pos)
	-- -- 
	-- -- local s = vmath.vector3(10.0, 10.0, 10.0)
	-- -- go.set_scale(s, self.fx)
end


-- local camera_url = msg.url("/camera")
-- local cameras = orthocam.get_cameras()
-- for k, v in pairs(cameras) do
-- 	print(k, v)
-- end
-- local pos = go.get_position("/player")
-- print(self.factory)
-- self.camera = msg.url("/camera")
-- go.set_position(particlefx_url, pos)
-- local viewport = camera.get_viewport(camera_id)
-- pprint("viewport", viewport)
-- pprint('player_pos', player_pos)
-- go.set_position(player_pos)

-- local view = go.get("/camera#camera", "view")
-- pprint(view)
-- 
-- print("url", particlefx_url)
-- print('camera_url', camera_url)

-- go.set_parent(particlefx_url, camera_url)

-- msg.post(particlefx_url, "set_parent", { parent_id = camera_url })

-- particlefx.play("#rain")
-- local camera_id = hash("/camera")
-- -- 
-- local vp = camera.get_viewport(camera_id)
-- pprint("viewport", viewport)

-- particlefx.set_constant(particlefx_url, "emitter", "width", vp.z)
-- particlefx.set_constant(particlefx_url, "emitter", "height", vp.w)

-- 	print(viewport.x, viewport.y, viewport.z, viewport.w)
-- 	local view = camera.get_view(camera_id)
-- 	
-- 	-- pprint("view", view)
-- 	local projection = camera.get_projection(camera_id)
-- 	local pos = vmath.vector3(viewport.x/2, viewport.w, 0)
-- 	pprint(pos)

-- 	-- print("projection", projection)
-- local camera_url = msg.url("/camera")