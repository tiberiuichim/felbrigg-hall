go.property("speed", 100)
go.property("max_zoom", 3 )
-- go.property("camera", hash("/camera"))
go.property("min_zoom", 10)

KEY_UP = hash("key_up")
KEY_DOWN = hash("key_down")
KEY_RIGHT = hash("key_right")
KEY_LEFT = hash("key_left")
KEY_ACTION = hash("action")

WALK_LEFT = hash("walk_left")
WALK_RIGHT = hash("walk_right")
WALK_BACK = hash("walk_back")
WALK_FRONT = hash("walk_front")
IDLE_RIGHT = hash("idle_right")
IDLE_LEFT = hash("idle_left")
IDLE_BACK = hash("idle_back")
IDLE_FRONT = hash("idle_front")

ZOOM_IN = hash("zoom_in")
ZOOM_OUT = hash("zoom_out")

-- ZOOM_OUT_MAX = 1
--ZOOM_IN_MAX = 6

local camera = require "orthographic.camera"

function init(self)
	msg.post(".", "acquire_input_focus")

	self.input = vmath.vector3()	-- stores direction of keyboard input
	
	self.current_animation = nil
	self.stop_animation = hash("idle_front")

	self.velocity = vmath.vector3()	-- directional speed of movement
	self.pp = vmath.vector3()	-- player position
	self.correction = vmath.vector3()	-- correction factor because we're inside collision

	self.trees_visible = true
	local target = msg.url(".")
	
	-- msg.post("game:/camera#camera", "follow", {target="main:/player"})
end

function play_animation(self) 
	local anim = self.stop_animation

	if self.input.x > 0 then
		anim = WALK_RIGHT
		self.stop_animation = IDLE_RIGHT
	elseif self.input.x < 0 then
		anim = WALK_LEFT
		self.stop_animation = IDLE_LEFT
	elseif self.input.y > 0 then
		anim = WALK_BACK
		self.stop_animation = IDLE_BACK
	elseif self.input.y < 0 then
		anim = WALK_FRONT
		self.stop_animation = IDLE_FRONT
	end

	if anim ~= self.current_animation then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_animation = anim
	end
end

function update(self, dt)
	if vmath.length_sqr(self.input) > 1 then   -- takes care of diagonal movement, see https://github.com/defold/tutorial-movement
		self.input = vmath.normalize(self.input)
	end

	play_animation(self)
	
	local p = go.get_position()
	local newp = p + self.input * self.speed * dt
	go.set_position(newp)

	self.velocity = p - self.pp
	self.pp = p
	self.input = vmath.vector3()    -- reset the input, stop moving
	self.correction = vmath.vector3()	-- no more corrections
end

function handle_geometry_contact(self, normal, distance)
	-- Get the info needed to move out of collision. We might
	-- get several contact points back and have to calculate
	-- how to move out of all of them by accumulating a
	-- correction vector for this frame:
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end
end

INPUT_DIRECTIONS = {
	KEY_UP = { y = 1 },
	KEY_DOWN = { y = -1 },
	KEY_RIGHT = { x = 1 },
	KEY_LEFT = { x = -1 }
}

function on_input(self, action_id, action)
	local action_pos = vmath.vector3(action.x, action.y, 0)
	local action_world_pos = camera.screen_to_world(self.camera, action_pos)
	local camera_pos = go.get_position(self.camera)

	-- local direction = INPUT_DIRECTIONS[action_id]
	-- print("direction", direction, action_id)
	-- if direction then
	-- 	self.input.x = direction.x or 0
	-- 	self.input.y = direction.y or 0
	
	if action_id == KEY_UP then
		self.input.y = 1
	elseif action_id == KEY_DOWN then
		self.input.y = -1
	elseif action_id == KEY_LEFT then
		self.input.x = -1
	elseif action_id == KEY_RIGHT then
		self.input.x = 1
	elseif action_id == KEY_ACTION then
		shake_camera(self)
	elseif action_id == ZOOM_IN then
		zoom_in(self)
	elseif action_id == ZOOM_OUT then
		zoom_out(self)
	end
end
	
function zoom_out(self)
	local zoom = camera.get_zoom(self.camera)
	zoom = math.max(self.max_zoom, zoom - 0.05)
	camera.set_zoom(self.camera, zoom)
	print("zoom in", zoom)
end

function zoom_in(self) 
	local zoom = camera.get_zoom(self.camera)
	zoom = math.min(self.min_zoom, zoom + 0.05)
	camera.set_zoom(self.camera, zoom)
	print("zoom in", zoom)
end

function shake_camera(self)
	camera.shake(self.camera, nil, nil, nil, function () 
		print("We shook the camera")
	end)
end

function on_message(self, message_id, message, sender)
	if (message.group == hash('oclusion')) then
		-- if message.distance ~= nil then
		-- 	if message.distance > 0 and self.trees_visible == true then
		-- 		print("hiding trees")
		-- 		self.trees_visible = false
		-- 		local tilemap_url = msg.url("/world#tiledmap-defold")
		-- 		go.set(tilemap_url, "opacity", 0.5)
		-- 	elseif message.distance < 0 and self.trees_visible == false then
		-- 		print("showing trees")
		-- 		self.trees_visible = true
		-- 	end
		-- end
		-- pprint(message)
	elseif message_id == hash("contact_point_response") then
		handle_geometry_contact(self, message.normal, message.distance)
	end
end